// Generated by gencpp from file rfans_driver/RfansCommandRequest.msg
// DO NOT EDIT!


#ifndef RFANS_DRIVER_MESSAGE_RFANSCOMMANDREQUEST_H
#define RFANS_DRIVER_MESSAGE_RFANSCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rfans_driver
{
template <class ContainerAllocator>
struct RfansCommandRequest_
{
  typedef RfansCommandRequest_<ContainerAllocator> Type;

  RfansCommandRequest_()
    : cmd(0)
    , speed(0)  {
    }
  RfansCommandRequest_(const ContainerAllocator& _alloc)
    : cmd(0)
    , speed(0)  {
  (void)_alloc;
    }



   typedef int32_t _cmd_type;
  _cmd_type cmd;

   typedef int32_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RfansCommandRequest_

typedef ::rfans_driver::RfansCommandRequest_<std::allocator<void> > RfansCommandRequest;

typedef boost::shared_ptr< ::rfans_driver::RfansCommandRequest > RfansCommandRequestPtr;
typedef boost::shared_ptr< ::rfans_driver::RfansCommandRequest const> RfansCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rfans_driver::RfansCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rfans_driver::RfansCommandRequest_<ContainerAllocator1> & lhs, const ::rfans_driver::RfansCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rfans_driver::RfansCommandRequest_<ContainerAllocator1> & lhs, const ::rfans_driver::RfansCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rfans_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e8a9ad96b1bd2e49f8cc79b295a2fe6";
  }

  static const char* value(const ::rfans_driver::RfansCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e8a9ad96b1bd2e4ULL;
  static const uint64_t static_value2 = 0x9f8cc79b295a2fe6ULL;
};

template<class ContainerAllocator>
struct DataType< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rfans_driver/RfansCommandRequest";
  }

  static const char* value(const ::rfans_driver::RfansCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 cmd\n"
"int32 speed\n"
;
  }

  static const char* value(const ::rfans_driver::RfansCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RfansCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rfans_driver::RfansCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rfans_driver::RfansCommandRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFANS_DRIVER_MESSAGE_RFANSCOMMANDREQUEST_H
