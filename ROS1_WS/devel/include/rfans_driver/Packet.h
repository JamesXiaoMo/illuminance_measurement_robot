// Generated by gencpp from file rfans_driver/Packet.msg
// DO NOT EDIT!


#ifndef RFANS_DRIVER_MESSAGE_PACKET_H
#define RFANS_DRIVER_MESSAGE_PACKET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rfans_driver
{
template <class ContainerAllocator>
struct Packet_
{
  typedef Packet_<ContainerAllocator> Type;

  Packet_()
    : stamp()
    , data()  {
    }
  Packet_(const ContainerAllocator& _alloc)
    : stamp()
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::rfans_driver::Packet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rfans_driver::Packet_<ContainerAllocator> const> ConstPtr;

}; // struct Packet_

typedef ::rfans_driver::Packet_<std::allocator<void> > Packet;

typedef boost::shared_ptr< ::rfans_driver::Packet > PacketPtr;
typedef boost::shared_ptr< ::rfans_driver::Packet const> PacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rfans_driver::Packet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rfans_driver::Packet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rfans_driver::Packet_<ContainerAllocator1> & lhs, const ::rfans_driver::Packet_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rfans_driver::Packet_<ContainerAllocator1> & lhs, const ::rfans_driver::Packet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rfans_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rfans_driver::Packet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfans_driver::Packet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfans_driver::Packet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfans_driver::Packet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfans_driver::Packet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfans_driver::Packet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rfans_driver::Packet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30d6e0c1226a788b1f0f869ab72b4074";
  }

  static const char* value(const ::rfans_driver::Packet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30d6e0c1226a788bULL;
  static const uint64_t static_value2 = 0x1f0f869ab72b4074ULL;
};

template<class ContainerAllocator>
struct DataType< ::rfans_driver::Packet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rfans_driver/Packet";
  }

  static const char* value(const ::rfans_driver::Packet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rfans_driver::Packet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# one packet msg definition\n"
"time stamp\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::rfans_driver::Packet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rfans_driver::Packet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Packet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rfans_driver::Packet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rfans_driver::Packet_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "data: ";
    if (v.data.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.data[i]);
    }
    if (v.data.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFANS_DRIVER_MESSAGE_PACKET_H
